import pytest
from pytestqt import qtbot
from Models.Interface import PlotterMain
import numpy as np
from math import sqrt,log10


# An instance of Main window

@pytest.fixture
def PlotterTest(qtbot):
    MainWindow=PlotterMain()
    qtbot.addWidget(MainWindow)
    return MainWindow

# Test if an empty formula will generate empty XAxis and YAxis arrays. This is important since when there is no formula present, nothing should be plotted
def test_ValidateAndUpdate_empty(PlotterTest,qtbot):
    PlotterTest.InputFunction.setText("")
    qtbot.wait(100)  # Allow time for the update to happen
    assert PlotterTest.Canvas.XAxis == [] # XAxis should be empty
    assert PlotterTest.Canvas.YAxis == [] # YAxis should be empty
    assert PlotterTest.CheckLabel.text() == "" # No message should be displayed
    assert PlotterTest.InputFunction.styleSheet() == PlotterTest.InputStyle # color of border not green or red


# below are test that test that specific operators are working well (from range 1 to 6) (parameters generated by Ai :) 
# Note: powering x to -5 or less causes assertion to fail, which could be due to very small numbers, that cannot be identified as close any more
@pytest.mark.parametrize("formula,y",[
    ("x^2", [1, 4, 9, 16, 25, 36]),
    ("x^3", [1, 8, 27, 64, 125, 216]),
    ("x^0.5", [1, sqrt(2), sqrt(3), 2, sqrt(5), sqrt(6)]),
    ("x^-1", [1, 0.5, 0.3333333333333333, 0.25, 0.2, 0.16666666666666666]),
    ("x^-2", [1, 0.25, 0.1111111111111111, 0.0625, 0.04, 0.02777777777777778]),
    ("x^-3", [1, 0.125, 0.037037037037037035, 0.015625, 0.008, 0.00462962962962963]),
    ("x^-4", [1, 0.0625, 0.012345679012345678, 0.00390625, 0.0016, 0.0007716049382716049]),
    ("log10(x)", [0, log10(2), log10(3), log10(4), log10(5), log10(6)]),
    ("sqrt(x)", [1, sqrt(2), sqrt(3), 2, sqrt(5), sqrt(6)]),
    ("2*x", [2, 4, 6, 8, 10, 12]),
    ("sqrt(x)+log10(x)", [1+log10(1), sqrt(2)+log10(2), sqrt(3)+log10(3), 2+log10(4), sqrt(5)+log10(5), sqrt(6)+log10(6)]),
    ("log10(x^2)", [0, 2*log10(2), 2*log10(3), 2*log10(4), 2*log10(5), 2*log10(6)]),
    ("sqrt(x^2)", [1, 2, 3, 4, 5, 6]),
    ("log10(sqrt(x))", [0, 0.5*log10(2), 0.5*log10(3), 0.5*log10(4), 0.5*log10(5), 0.5*log10(6)])
])
def test_ValidateAndUpdate_correct_1(PlotterTest, qtbot, formula, y):
    PlotterTest.InputFunction.setText(formula)
    PlotterTest.XMin.setValue(1)
    PlotterTest.XMax.setValue(6)
    qtbot.wait(100)
    assert np.allclose(PlotterTest.Canvas.XAxis, np.arange(1, 6.00001, 1))
    assert np.allclose(PlotterTest.Canvas.YAxis, y)
    assert PlotterTest.CheckLabel.text() == "Correct!"
    assert PlotterTest.CheckLabel.styleSheet() == "color:#008000;"
    assert PlotterTest.InputFunction.styleSheet() == PlotterTest.InputStyle + "border-color:#008000;"

# below test special cases (DivisionByZero - Log10 with x<=0 - Sqrt with x<0 - incorrectly written formula)
@pytest.mark.parametrize("i",[(0),(-1),(-2),(-3)])
def test_ValidateAndUpdate_log10Error(PlotterTest, qtbot,i):
    PlotterTest.InputFunction.setText("log10(x)")
    PlotterTest.XMin.setValue(i)
    qtbot.wait(100)
    assert PlotterTest.CheckLabel.text() == "A <=0 value is entered inconveniently in log10 or sqrt"
    assert PlotterTest.CheckLabel.styleSheet() == "color:#FF0000;"
    assert PlotterTest.InputFunction.styleSheet() == PlotterTest.InputStyle + "border-color:#FF0000;"


@pytest.mark.parametrize("i",[-1,-2,-3])
def test_ValidateAndUpdate_sqrtError(PlotterTest, qtbot,i):
    PlotterTest.InputFunction.setText("sqrt(x)")
    PlotterTest.XMin.setValue(i)
    qtbot.wait(100)
    assert PlotterTest.CheckLabel.text() == "A <=0 value is entered inconveniently in log10 or sqrt"
    assert PlotterTest.CheckLabel.styleSheet() == "color:#FF0000;"
    assert PlotterTest.InputFunction.styleSheet() == PlotterTest.InputStyle + "border-color:#FF0000;"

def test_ValidateAndUpdate_zerodivisionError(PlotterTest, qtbot):
    PlotterTest.InputFunction.setText("x/0")
    qtbot.wait(100)
    assert PlotterTest.CheckLabel.text() == "Division By zero Detected !"
    assert PlotterTest.CheckLabel.styleSheet() == "color:#FF0000;"
    assert PlotterTest.InputFunction.styleSheet() == PlotterTest.InputStyle + "border-color:#FF0000;"

@pytest.mark.parametrize("formula",["x+y","x**","x2*df","x**2","2x"])
def test_ValidateAndUpdate_incorrectFormula(PlotterTest, qtbot,formula):
    PlotterTest.InputFunction.setText(formula)
    qtbot.wait(100)
    assert PlotterTest.CheckLabel.text() == "Incorrect Formula"
    assert PlotterTest.CheckLabel.styleSheet() == "color:#FF0000;"
    assert PlotterTest.InputFunction.styleSheet() == PlotterTest.InputStyle + "border-color:#FF0000;"
